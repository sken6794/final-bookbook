<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xsi:schemaLocation="http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket-4.3.xsd
		http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<!-- annotation-driven : @Controller 어노테이션을 사용하여 Controller 클래스를
	Spring Bean으로 등록하여 사용할 수 있는 기능을 제공하는 엘리먼트 -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />


	<!-- UrlBasedViewResolver : Spring에서 제공되는 ViewResolver를 사용하지 않고
	외부에서 제공하는 ViewResolver를 사용하기 위한 기능을 제공하는 클래스 -->
	<beans:bean class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<!-- viewClass 필드에 외부에서 제공하는 ViewResolver 클래스(TilesView)를 인젝션 처리 -->
		<beans:property name="viewClass" value="org.springframework.web.servlet.view.tiles3.TilesView"/>
		<!-- order 필드에 ViewResolver 우선순위 관련 정수값을 인젝션 처리 -->
		<!-- => 정수값이 낮을수록 우선순위가 높게 설정 -->
		<beans:property name="order" value="2"/>
	</beans:bean>

	<!-- TilesConfigurer : Tiles 프로그램에서 사용할 템플릿 페이지 정보가
	저장된 XML 파일(Tiles 환경설정파일)을 지정하기 위한 클래스 -->
	<beans:bean class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
		<!-- definitions 필드에 XML 파일 경로를 요소로 저장하는 배열을 생성하여 인젝션 처리 -->
		<beans:property name="definitions">
			<beans:list>
				<beans:value>/WEB-INF/spring/appServlet/tiles.xml</beans:value>
			</beans:list>
		</beans:property>
	</beans:bean>

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="order" value="3"/>
	</beans:bean>
	
	<!-- component-scan : Spring Container에 의해 특정 패키지의 클래스에 
	작성된 어노테이션을 처리하는 엘리먼트 -->
	<!-- <context:component-scan base-package="site.itwill.controller" /> -->
	<context:component-scan base-package="site.itwill.controller"/>
	<context:component-scan base-package="site.itwill.dao"/>
	<context:component-scan base-package="site.itwill.service"/>
	<context:component-scan base-package="site.itwill.socket" />
	
	<!-- 파일 업로드 기능을 제공하는 클래스를 Spring Bean으로 등록 -->
	<!-- => beanName은 반드시 multipartResolver로 설정-->	
	<beans:bean class="org.springframework.web.multipart.commons.CommonsMultipartResolver" id="multipartResolver">
		<!-- maxUploadSize 필드에 업로드 파일의 용량 제한값(Byte)을 인젝션 처리 -->
		<beans:property name="maxUploadSize" value="20971520"/>
		<!-- defaultEncoding 필드에 입력값에 대한 캐릭터셋의 인코딩을 인젝션 처리 -->
		<beans:property name="defaultEncoding" value="utf-8"/>
	</beans:bean>
	
	<!-- 인터셉터 Spring Bean 등록 -->
	<beans:bean class="site.itwill.interceptor.LoginAuthInterceptor" id="loginAuthInterceptor"/>
	<beans:bean class="site.itwill.interceptor.AdminAuthInterceptor" id="adminAuthInterceptor"/>
	
	<interceptors>
		<interceptor>
			<mapping path="/book"/>
			<mapping path="/chat"/>
			<mapping path="/atdn"/>
			<mapping path="/atdn_member"/>
			<mapping path="/bookin"/>
			<mapping path="/bookout"/>
			<mapping path="/stock"/>
			<mapping path="/document"/>
			<mapping path="/member"/>
			<mapping path="/order"/>
			<mapping path="/request"/>
			<mapping path="/payManage"/>
			<mapping path="/stats"/>
			<mapping path="/calendar"/>
			<mapping path="/notice"/>
			<mapping path="/noticeList"/>
			<beans:ref bean="loginAuthInterceptor"/>
		</interceptor>
		
	</interceptors>
	
	
	
	
	<beans:bean id="webSocketHandler" class="site.itwill.socket.handler.WebSocketHandler" />
	<!-- 웹 소켓핸들러 -->
        <websocket:handlers>
               <websocket:mapping handler="webSocketHandler" path="/web"/>
               <!-- WebSocket Handshake : 웹소켓 핸들러 클래스(echoHandler)가 호출되기전에 HttpSession에 접속하여  -->
               <!-- '이용자 아이디를 추출하는 기능' 등을 인터셉터가 수행하도록 설정 -->
               <websocket:handshake-interceptors>
                       <beans:bean class="org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor"/>
               </websocket:handshake-interceptors>
                <!-- <websocket:sockjs /> --> 
        </websocket:handlers>
	
	
	
</beans:beans>
